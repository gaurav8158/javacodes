class Solution {
   public boolean dfs(ArrayList<ArrayList<Integer>> g, int x, int col, int[] vis) {
	   if(vis[x] != -1) {
		   if(vis[x] == col) return true;
		   else return false;
	   }

	   vis[x] = col;
		boolean ans = true;
	   for(int i = 0; i < g.get(x).size(); i++) {
			boolean temp = dfs(g, g.get(x).get(i), 1 - col, vis);
		   ans = (ans & temp);
	   }

	   return ans;
   }
	
    public int possibleBipartition(int n, int[][] dislikes) {
        // Write your code here
		ArrayList<ArrayList<Integer>> g = new ArrayList<>();

		for(int i = 0; i < n; i++) {
			g.add(new ArrayList<Integer>());
		}

		for(int i = 0; i < dislikes.length; i++) {
			int x = dislikes[i][0] - 1, y = dislikes[i][1] - 1;

			g.get(x).add(y);
			g.get(y).add(x);
		}

		int[] vis = new int[n];
		Arrays.fill(vis, -1);

		boolean ans = true;
		for(int i = 0; i < n; i++) {
			if(vis[i] == -1) {
				boolean temp = dfs(g, i, 0, vis);
				ans = (ans & temp);
			}
		}

		if(ans) return 1;
		else return 0;
    }
}

