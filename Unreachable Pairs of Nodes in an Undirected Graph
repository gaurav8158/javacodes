import java.util.*;

class Main {

	public static void main(String[] args)
	{
		int n,k;
        Scanner sc =new Scanner(System.in);
        n = sc.nextInt();
        k = sc.nextInt();
        int[][] arr = new int [k][2];
        for(int i=0;i<k;i++){
            arr[i][0]=sc.nextInt();
            arr[i][1]=sc.nextInt();
        }
		System.out.println(new Solution().countPairs(n,arr));
	}
}

class Solution {
    
    public long countPairs(int n, int[][] edges) {
        //Write code here
		ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();

		for(int i = 0; i < n; i++) {
			graph.add(new ArrayList<Integer>());
		}

		
		for(int i = 0; i < edges.length; i++) {
			int x = edges[i][0], y = edges[i][1];
			graph.get(x).add(y);
			graph.get(y).add(x);
		}

		boolean[] vis = new boolean[n];
		
		ArrayList<Long> comps = new ArrayList<Long>();

		for(int i = 0; i < n; i++) {
			if(vis[i] == false) {
				long c = bfs(graph, i, vis);
				comps.add(c);
			}
		}

		long ans = 0;

		for(int i = 0; i < comps.size(); i++) {
			for(int j = i+1; j < comps.size(); j++) {
				ans += (comps.get(i) * comps.get(j));
			}
		}

		return ans;

    }

	public long bfs(ArrayList<ArrayList<Integer>> graph, int x, boolean[] vis) {
		LinkedList<Integer> q = new LinkedList<Integer>();

		q.add(x);
		vis[x] = true;

		long ans = 0;

		while(q.size() > 0) {
			int f = q.poll();
			// System.out.print(f + " ");
			ans++;

			for(int i = 0; i < graph.get(f).size(); i++) {
				int y = graph.get(f).get(i);

				if(vis[y] == false) {
					q.add(y);
					vis[y] = true;
				}
			}
		}

		return ans;
	}

}
