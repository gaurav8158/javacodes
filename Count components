import java.io.*;
import java.util.*;
class Main {
    public static void main(String args[]) throws IOException {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(read.readLine());
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i=0; i<N; i++)
        {
            String S[] = read.readLine().split(" ");
            ArrayList<Integer> temp = new ArrayList<>();
            for(int j=0; j<N; j++)
                temp.add(Integer.parseInt(S[j]));
            adj.add(temp);
        }

        Solution ob = new Solution();
        System.out.println(ob.components(adj,N));
    }
}

class Solution {
	void dfs(ArrayList<ArrayList<Integer>> adj, int x, boolean[] vis) {
		if(vis[x] == true) return;

		vis[x] = true;

		for(int i = 0; i < adj.size(); i++) {
			if(adj.get(x).get(i) == 1) 
				dfs(adj, i, vis);
		}
	}
	void bfs(ArrayList<ArrayList<Integer>> adj, int x, boolean[] vis) {
		LinkedList<Integer> q = new LinkedList<>();
		int n = adj.size();
		
		q.add(x);
		vis[x] = true;

		while(q.size() > 0) {
			int f = q.poll();

			for(int i = 0; i < n; i++) {
				if(adj.get(f).get(i) == 1 && vis[i] == false) {
					vis[i] = true;
					q.add(i);
				}
			}
		}
	}


    int components(ArrayList<ArrayList<Integer>> adj, int N) {
        
       //Your code here
		int comps = 0;

		boolean[] vis = new boolean[N];

		for(int i = 0; i < N; i++) {
			if(vis[i] == false) {
				dfs(adj, i, vis);
				comps++;
			}
		}

		return comps;

    }
};


// can use bfs or dfs
